import java.nio.charset.StandardCharsets

plugins {
    id('com.android.application')
    id('kotlin-android')
    //https://github.com/detekt/detekt/releases
    id("io.gitlab.arturbosch.detekt").version("1.17.0-RC2")
}

android {

    compileSdkVersion 30
    //https://developer.android.com/studio/releases/build-tools
    buildToolsVersion '30.0.3'

    defaultConfig {

        applicationId "cat.mvmike.minimalcalendarwidget"
        minSdkVersion 24    // 7.0
        targetSdkVersion 30 // 10.0
        versionCode 25
        versionName "2.0.0"

        multiDexEnabled true

        archivesBaseName = "min-cal-widget"
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        compileOptions.encoding = StandardCharsets.UTF_8

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.res.srcDirs += "src/main/res"

        test.java.srcDirs += 'src/test/kotlin'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                events 'skipped', 'failed', 'standardOut', 'standardError'
                exceptionFormat "full"
            }
        }
    }

    detekt {
        config = files("${project.rootDir}/config/detekt/detekt.yml")
    }

    /*
     * To sign release builds, create the file gradle.properties in
     * ~/.gradle/ with this content:
     *
     * signingStoreFile=key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreFile')
            && project.hasProperty('signingStorePassword')
            && project.hasProperty('signingKeyAlias')
            && project.hasProperty('signingKeyPassword')) {

        println "Found sign properties in gradle.properties! Signing buildâ€¦"
        signingConfigs {
            release {
                storeFile file(signingStoreFile)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //https://github.com/google/desugar_jdk_libs
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    //https://developer.android.com/jetpack/androidx/versions/
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.core:core-ktx:1.3.2"

    //https://github.com/junit-team/junit5/releases
    def junitJupiterVersion = '5.7.1'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    //https://github.com/mockito/mockito/releases
    testImplementation 'org.mockito:mockito-core:3.10.0'

    //https://github.com/assertj/assertj-core/releases
    testImplementation "org.assertj:assertj-core:3.19.0"
}