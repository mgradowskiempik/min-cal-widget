import java.nio.charset.StandardCharsets

import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
import static org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
    id("com.android.application")
    id("kotlin-android")
    //https://github.com/detekt/detekt/releases
    id("io.gitlab.arturbosch.detekt").version("1.18.1")
}

android {

    //https://source.android.com/setup/start/build-numbers
    compileSdkVersion 30
    //https://developer.android.com/studio/releases/build-tools
    buildToolsVersion "30.0.3"

    defaultConfig {

        applicationId "cat.mvmike.minimalcalendarwidget"
        minSdkVersion 24    // 7.0
        targetSdkVersion 30 // 11.0
        versionCode 30
        versionName "2.1.2"

        multiDexEnabled true

        archivesBaseName = "min-cal-widget"
    }

    def javaVersion = JavaVersion.VERSION_11

    compileOptions {
        coreLibraryDesugaringEnabled true
        compileOptions.encoding = StandardCharsets.UTF_8

        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    kotlinOptions {
        jvmTarget = javaVersion
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        main.res.srcDirs += [
                "src/main/res/layouts/common",
                "src/main/res/layouts/dark",
                "src/main/res/layouts/light",
                "src/main/res"
        ]

        test.java.srcDirs += "src/test/kotlin"
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                events SKIPPED, FAILED, STANDARD_ERROR, STANDARD_OUT
                exceptionFormat FULL
            }
        }
    }

    detekt {
        source = files("${project.rootDir}/config/detekt/detekt.yml")
    }

    /*
     * To sign release builds, create the file gradle.properties in
     * ~/.gradle/ with this content:
     *
     * signingStoreFile=key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty("signingStoreFile")
            && project.hasProperty("signingStorePassword")
            && project.hasProperty("signingKeyAlias")
            && project.hasProperty("signingKeyPassword")) {

        println "Found sign properties in gradle.properties! Signing buildâ€¦"
        signingConfigs {
            release {
                storeFile file(signingStoreFile)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "${project.rootDir}/config/proguard/proguard-rules.pro"
        }
    }
}

dependencies {

    //https://github.com/google/desugar_jdk_libs/releases
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    //https://developer.android.com/jetpack/androidx/versions/
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.core:core-ktx:1.6.0"

    //https://github.com/junit-team/junit5/releases
    def junitJupiterVersion = "5.7.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    //https://github.com/mockk/mockk/releases
    testImplementation "io.mockk:mockk:1.12.0"

    //https://github.com/assertj/assertj-core/releases
    testImplementation "org.assertj:assertj-core:3.20.2"
}